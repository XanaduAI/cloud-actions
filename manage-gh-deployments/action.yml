name: Manage GitHub Deployment
description: |
  This actions allows the calling function to create a Deployment.

inputs:
  environment:
    type: string
    description: The current Deployment environment
    required: true
  deployment_stage:
    type: choice
    description: The current deployment stage for the given deployment
    required: true
    options:
      - in_progress
      - error
      - failure
      - pending
      - queued
      - success
      - inactive
  deployment_ref:
    type: string
    description: The current git ref (branch name) that this deployment was deployed from
    required: true
  deployment_id:
    type: string
    description: If passed, the status of the existing deployment will be updated instead of a new deployment being created.
    required: false
    default: ''
  deployment_description:
    type: string
    description: The description to attach to the deployment
    required: false
    default: ''
  deployment_log_url:
    type: string
    description: A link to the logs for this deployment
    required: false
    default: ''
  deployment_url:
    type: string
    description: The URL that can be used to access this deployment
    required: false
    default: ''
  required_contexts:
    type: string
    description: |
      A list of other actions that must pass in order for this deployment creation/update to be successful.
    required: false
    default: ''

outputs:
  deployment_id:
    description: The ID of the deployment created (and/or) updated
    value: ${{ steps.create_deployment.outputs.result }}

runs:
  using: composite
  steps:
    - uses: actions/github-script@v6
      id: fetch_existing_deployments
      with:
        script: |
          const deploymentEnv = "${{ inputs.environment }}";
          const deploymentRef = "${{ inputs.deployment_ref }}";
          
          const existingDeployments = await github.paginate(github.rest.repos.listDeployments.endpoint.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: deploymentEnv,
              ref: deploymentRef
          }));
          
          return existingDeployments || [];

    - uses: actions/github-script@v6
      id: delete_deployment
      with:
        result-encoding: string
        script: |
          const existingDeployments = ${{ steps.fetch_existing_deployments.outputs.result }};
          const userDeploymentIdInput = "${{ inputs.deployment_id }}";
          
          for (const deployment of existingDeployments) {
            if (userDeploymentIdInput && deployment.id.toString() === userDeploymentIdInput) continue;
          
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: "inactive"
            });
            await github.rest.repos.deleteDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id
            });
          }

    - uses: actions/github-script@v6
      id: create_deployment
      if: inputs.deployment_stage != 'inactive'
      with:
        result-encoding: string
        script: |          
          const deploymentDesc = "${{ inputs.deployment_description }}";
          const deploymentStage = "${{ inputs.deployment_stage }}";
          const deploymentRef = "${{ inputs.deployment_ref }}";
          const deploymentEnv = "${{ inputs.environment }}";
          const deploymentContextsUserInput = "${{ inputs.required_contexts }}";
          const deploymentContexts = (deploymentContextsUserInput === "null) ? [] : deploymentContextsUserInput.split("\n").map(elem => elem.split(",")).flat().filter(elem => elem);
          const deploymentLogUrl = "${{ inputs.deployment_log_url }}";
          const deploymentEnvUrl = "${{ inputs.deployment_url }}";
          const userDeploymentIdInput = "${{ inputs.deployment_id }}";
          
          let deploymentId = null;
          if (!userDeploymentIdInput) {
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: deploymentRef,
              environment: deploymentEnv,
              required_contexts: (deploymentContextsUserInput !== "null") ? deploymentContexts : null,
              transient_environment: true,
              auto_merge: false,
              description: deploymentDesc
            });
            deploymentId = deployment.data.id;
          } else {
            deploymentId = userDeploymentIdInput;
          }
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deploymentId,
            state: deploymentStage,
            log_url: deploymentLogUrl,
            environment_url: deploymentEnvUrl
          });
          
          return deploymentId;
