name: Analyse Source Code for Security Vulnerabilities

on:
  workflow_call:
    inputs:
      github-repository:
        description: 'The GitHub Repository to scan'
        type: string
        required: true
      repository-ref:
        description: 'The branch or tag to scan'
        type: string
        required: true
      runner_name:
        description: 'The name of the runner to use'
        type: string
        required: false
        default: 'ubuntu-latest'
      
      scan_directory:
        description: 'The directory to scan within the cloned repository'
        type: string
        required: false
        default: './'
      
      enable-bandit-scan:
        description: 'Enable Bandit Scan'
        type: boolean
        required: false
        default: true
      enable-semgrep-scan:
        description: 'Enable Semgrep Scan'
        type: boolean
        required: false
        default: true
      
      bandit-config-file:
        description: 'Localtion of Bandit Config File within the repository that is cloned'
        type: string
        required: false
        default: 'auto'
      bandit-error-on-severity:
        description: 'Bandit Error on Severity'
        type: string
        required: false
        default: 'LOW'
    
      semgrep-config-file:
        description: 'Semgrep Config File'
        type: string
        required: false
        default: ''
      semgrep-error-on-severity:
        description: 'Bandit Error on Severity'
        type: string
        required: false
        default: 'LOW'

jobs:
  semgrep:
    runs-on: ${{ inputs.runner_name }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          repository: ${{ inputs.github-repository }}
          ref: ${{ inputs.repository-ref }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Semgrep
        shell: bash
        run: pip install semgrep
      
      - name: Run Semgrep Scan
        shell: bash
        env:
          SEMGREP_SCAN_DIR: ${{ inputs.scan_directory }}
        run: |
          semgrep ci --config ${{ inputs.semgrep-config-file }} --json --json-output semgrep_report.json "$SEMGREP_SCAN_DIR" || true
          # Also run with normal output for display purposes
          semgrep ci --config ${{ inputs.semgrep-config-file }} "$SEMGREP_SCAN_DIR" || true
      
      - name: Filter Semgrep Scan Results
        id: semgrep-filter
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            
            try {
              const semgrep_report = JSON.parse(fs.readFileSync('semgrep_report.json', 'utf8'));
              
              // Mapping of semgrep-error-on-severity to impact thresholds
              const severityToImpactMap = {
                'LOW': ['LOW', 'MEDIUM', 'HIGH'],
                'MEDIUM': ['MEDIUM', 'HIGH'],
                'HIGH': ['HIGH']
              };
              
              const impactThresholds = severityToImpactMap['${{ inputs.semgrep-error-on-severity }}'] || ['LOW', 'MEDIUM', 'HIGH'];
              
              // Filter results based on impact level and the specified error-on-severity
              let filtered_report = [];
              
              if (semgrep_report.results) {
                filtered_report = semgrep_report.results.filter(result => {
                  // Extract the impact from metadata if available
                  const impact = result.extra?.metadata?.impact || 'MEDIUM';
                  return impactThresholds.includes(impact);
                });
              }
              
              console.log(`Found ${filtered_report.length} Semgrep issues at or above ${{ inputs.semgrep-error-on-severity }} severity`);
              
              // Log the specific issues for visibility
              if (filtered_report.length > 0) {
                console.log("Found issues:");
                filtered_report.forEach((issue, idx) => {
                  const path = issue.path;
                  const line = issue.start?.line || 'N/A';
                  const message = issue.extra?.message || 'No message provided';
                  const impact = issue.extra?.metadata?.impact || 'UNKNOWN';
                  const severity = issue.severity || 'UNKNOWN';
                  
                  console.log(`#${idx+1}: ${path}:${line} - ${message} (Impact: ${impact}, Severity: ${severity})`);
                });
              }
              
              fs.writeFileSync('semgrep_filtered_report.json', JSON.stringify(filtered_report));
              
              return filtered_report.length > 0 ? 'true' : 'false';
            } catch (error) {
              console.log('Error processing Semgrep report:', error);
              return 'false';
            }
      
      - name: Error if Semgrep Scan Results
        if: steps.semgrep-filter.outputs.result == 'true'
        shell: bash
        run: exit 1
  
  bandit:
    runs-on: ${{ inputs.runner_name }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          repository: ${{ inputs.github-repository }}
          ref: ${{ inputs.repository-ref }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Bandit
        shell: bash
        run: pip install 'bandit[sarif,toml]'
        
      - name: Bandit Args
        id: bandit-config-args
        run: |
          if [ -z "${{ inputs.bandit-config-file }}" ]; then
            echo "config=-c ${{ inputs.bandit-config-file }}" >> $GITHUB_OUTPUT
          fi
        
      - name: Run Bandit Scan
        shell: bash
        env:
          BANDIT_SCAN_DIR: ${{ inputs.scan_directory }}
        run: |
          bandit ${{ steps.bandit-config-args.outputs.config }} -f json -o bandit_report.json -r "$BANDIT_SCAN_DIR" || true 
          bandit ${{ steps.bandit-config-args.outputs.config }} -f screen -r "$BANDIT_SCAN_DIR" || true 
      
      - name: Filter Bandit Scan Results
        id: bandit-filter
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const bandit_report = JSON.parse(fs.readFileSync('bandit_report.json', 'utf8'));
            
            // Define severity levels and their hierarchy
            const severityLevels = {
              'LOW': 1,
              'MEDIUM': 2,
              'HIGH': 3
            };
            
            // Get the minimum severity level to filter on
            const minSeverity = severityLevels['${{ inputs.bandit-error-on-severity }}'] || 1;
            
            // Filter results based on severity level threshold
            let filtered_report = bandit_report.results.filter(result => {
              const resultSeverity = result.issue_severity.toUpperCase();
              return severityLevels[resultSeverity] >= minSeverity;
            });
            
            console.log(`Found ${filtered_report.length} issues at or above ${{ inputs.bandit-error-on-severity }} severity`);
            
            fs.writeFileSync('bandit_filtered_report.json', JSON.stringify(filtered_report));
            
            return filtered_report.length > 0 ? 'true' : 'false';
      
      - name: Error if Bandit Scan Results
        if: steps.bandit-filter.outputs.result == 'true'
        shell: bash
        run: exit 1  
