name: Push files to an S3 bucket destination and invalidate the cloudfront cache
description: |
  This action will push files to a destination S3 bucket (or a folder within a bucket) and invalidates the cloudfront cache.
  The action also removes any stale files from the bucket. The action can also delete files/folders from the bucket.

inputs:
  s3-bucket:
    description: The name of the S3 bucket
    required: true
  build-directory:
    description: The directory that contains the build files to upload to S3
    required: true
  aws-cloudfront-distribution-id:
    description: The cloudfront distribution ID for the app
    required: true
  aws-region:
    description: The aws region used by the IAM machine user
    required: true
  aws-access-key-id:
    description: The aws access key id for the IAM machine user
    required:  true
  aws-secret-access-key:
    description: The aws secret access key for the IAM machine user
    required:  true

runs:
  using: composite
  steps:
    - name: On Pull Request creation push the built files to a new folder
      shell: bash
      if: github.event_name == 'pull_request' && github.event.action == 'opened'
      env:
        AWS_REGION: ${{ inputs.aws-region }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        prno: ${{ github.event.number }}
        GITHUB_CONTEXT:  ${{ toJson(github) }}
      run: |
        echo $prno
        echo $GITHUB_CONTEXT
      # aws s3 sync ${{ inputs.build-directory }}/ s3://${{ inputs.s3-bucket }}/PR-$prno/

    - name: On Pull Request update push the changed files to the existing folder
      shell: bash
      if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
      env:
        AWS_REGION: ${{ inputs.aws-region }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        prno: ${{ github.event.number }}
      run: |
        aws s3 sync ${{ inputs.build-directory }}/ s3://${{ inputs.s3-bucket }}/PR-$prno/ --delete
        aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/PR-$prno/*"
      
    - name: Delete the folder on S3 when a PR is closed without merging
      shell: bash
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false
      env:
        AWS_REGION: ${{ inputs.aws-region }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        prno: ${{ github.event.number }}
      run: aws s3 rm s3://${{ inputs.s3-bucket }}/PR-$prno/ --recursive
      
    - name: When a PR is merged to main update the root folder of the S3 bucket
      shell: bash
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.base_ref == 'main'
      env:
        AWS_REGION: ${{ inputs.aws-region }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        prno: ${{ github.event.number }}
      run: |
        aws s3 sync ${{ inputs.build-directory }}/ s3://${{ inputs.s3-bucket }}/ --delete --exclude "PR-[0-9]*"
        aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/*"
